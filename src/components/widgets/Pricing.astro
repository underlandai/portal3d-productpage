---
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Pricing as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  prices = [],
  hasMonthlyYearlyToggle = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<script is:inline>
  // Use is:inline to ensure the script runs directly without Astro processing
  // Add event listeners when the DOM is ready
  document.addEventListener('DOMContentLoaded', setupPricingToggle);
  // Also run immediately in case the DOM is already loaded
  setupPricingToggle();
  
  function setupPricingToggle() {
    const toggleMonthly = document.getElementById('toggleMonthly');
    const toggleAnnually = document.getElementById('toggleAnnually');
    
    if (!toggleMonthly || !toggleAnnually) {
      // If elements aren't found, try again after a short delay
      setTimeout(setupPricingToggle, 100);
      return;
    }
    
    const pricingMonthly = document.querySelectorAll('.pricing-monthly');
    const pricingAnnual = document.querySelectorAll('.pricing-annual');
    
    // Make sure we don't add event listeners twice
    toggleMonthly.setAttribute('data-initialized', 'true');
    toggleAnnually.setAttribute('data-initialized', 'true');
    
    // Set initial state of pricing cards - make monthly visible and annual hidden
    pricingMonthly.forEach(el => { 
      el.classList.remove('hidden');
      el.classList.add('flex'); 
    });
    pricingAnnual.forEach(el => { 
      el.classList.add('hidden'); 
      el.classList.remove('flex');
    });

    // Monthly toggle click event
    toggleMonthly.onclick = function() {
      toggleMonthly.classList.remove('bg-gray-100', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-100');
      toggleMonthly.classList.add('bg-primary', 'text-white');
      toggleAnnually.classList.remove('bg-primary', 'text-white');
      toggleAnnually.classList.add('bg-gray-100', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-100');
      
      // Immediately switch to monthly plans without animation
      pricingMonthly.forEach(el => { 
        el.classList.remove('hidden');
        el.classList.add('flex'); 
      });
      pricingAnnual.forEach(el => { 
        el.classList.add('hidden'); 
        el.classList.remove('flex');
      });
    };

    // Annual toggle click event
    toggleAnnually.onclick = function() {
      toggleAnnually.classList.remove('bg-gray-100', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-100');
      toggleAnnually.classList.add('bg-primary', 'text-white');
      toggleMonthly.classList.remove('bg-primary', 'text-white');
      toggleMonthly.classList.add('bg-gray-100', 'text-gray-700', 'dark:bg-gray-700', 'dark:text-gray-100');
      
      // Immediately switch to annual plans without animation
      pricingMonthly.forEach(el => { 
        el.classList.add('hidden'); 
        el.classList.remove('flex');
      });
      pricingAnnual.forEach(el => { 
        el.classList.remove('hidden');
        el.classList.add('flex'); 
      });
    };
    
    console.log('Pricing toggle handlers initialized successfully');
  }
</script>

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  
  {hasMonthlyYearlyToggle && (
    <div class="flex justify-center mb-8">
      <div class="inline-flex rounded-md shadow-sm">
        <button id="toggleMonthly" type="button" class="px-4 py-2 text-sm font-medium rounded-l-md transition-colors duration-300 bg-primary text-white">
          Monthly
        </button>
        <button id="toggleAnnually" type="button" class="px-4 py-2 text-sm font-medium rounded-r-md transition-colors duration-300 bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-100">
          Annually
        </button>
      </div>
    </div>
  )}
  
  <div class="flex items-stretch justify-center">
    <div class="grid grid-cols-1 gap-4 dark:text-white sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-4">
      {
        prices &&
          prices.map(({ title, subtitle, price, period, annualPrice, items, callToAction, hasRibbon = false, ribbonTitle, billingPeriod }) => {
            // Determine if this is a monthly, annual, or period-independent plan (like Free)
            const isMonthlyPlan = billingPeriod === 'monthly' || (!billingPeriod && !annualPrice);
            const isAnnualPlan = billingPeriod === 'annual';
            const isAlwaysVisible = price === 'Free' || title === 'Enterprise' || (!isMonthlyPlan && !isAnnualPlan);
            
            // Set the CSS class for visibility toggling
            let visibilityClass = '';
            if (isAlwaysVisible) {
              visibilityClass = '';
            } else if (isMonthlyPlan) {
              visibilityClass = 'pricing-monthly';
            } else if (isAnnualPlan) {
              visibilityClass = 'pricing-annual hidden';
            }
            
            return (
              <div class={`col-span-3 mx-auto flex w-full sm:col-span-1 md:col-span-1 lg:col-span-1 xl:col-span-1 intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter ${visibilityClass}`}>
                {price && (
                  <div class="rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow px-6 py-8 flex w-full max-w-sm flex-col justify-between text-center">
                  {hasRibbon && ribbonTitle && (
                    <div class="absolute right-[-5px] 2xl:right-[-8px] rtl:right-auto rtl:left-[-8px] rtl:2xl:left-[-10px] top-[-5px] 2xl:top-[-10px] z-[1] h-[100px] w-[100px] overflow-hidden text-right">
                      <span class="absolute top-[19px] right-[-21px] rtl:right-auto rtl:left-[-21px] block w-full rotate-45 rtl:-rotate-45 bg-green-700 text-center text-[10px] font-bold uppercase leading-5 text-white shadow-[0_3px_10px_-5px_rgba(0,0,0,0.3)] before:absolute before:left-0 before:top-full before:z-[-1] before:border-[3px] before:border-r-transparent before:border-b-transparent before:border-l-green-800 before:border-t-green-800 before:content-[''] after:absolute after:right-0 after:top-full after:z-[-1] after:border-[3px] after:border-l-transparent after:border-b-transparent after:border-r-green-800 after:border-t-green-800 after:content-['']">
                        {ribbonTitle}
                      </span>
                    </div>
                  )}
                  <div class="px-2 py-0">
                    {title && (
                      <h3 class="text-center text-xl font-semibold uppercase leading-6 tracking-wider mb-2">{title}</h3>
                    )}
                    {subtitle && <p class="font-light sm:text-lg text-gray-600 dark:text-slate-400">{subtitle}</p>}
                    <div class="my-8">
                      <div class="flex items-center justify-center text-center mb-1">
                        {price !== 'Free' && !isNaN(Number(price)) && price !== 'Custom' && <span class="text-5xl">$</span>}
                        <span class="text-6xl font-extrabold">{price}</span>
                      </div>
                      <span class="text-base leading-6 text-gray-600 dark:text-slate-400">{period}</span>
                    </div>
                    {items && (
                      <ul class="my-8 md:my-10 space-y-2 text-left">
                        {items.map(
                          ({ description, icon }) =>
                            description && (
                              <li class="mb-1.5 flex items-start space-x-3 leading-7">
                                <div class={`rounded-full mt-1 ${icon === 'tabler:x' ? 'bg-red-500' : 'bg-green-500'}`} style={icon === 'tabler:x' ? 'background-color: #FF0000;' : 'background-color: #008000;'}>
                                  <Icon name={icon ? icon : 'tabler:check'} class="w-5 h-5 font-bold p-1 text-white [&>svg]:stroke-[3]" />
                                </div>
                                <span>{description}</span>
                              </li>
                            )
                        )}
                      </ul>
                    )}
                  </div>
                  {callToAction && (
                    <div class={`flex justify-center`}>
                      {typeof callToAction === 'string' ? (
                        <Fragment set:html={callToAction} />
                      ) : (
                        callToAction &&
                        callToAction.href && <Button variant="primary" {...callToAction} />
                      )}
                    </div>
                  )}
                </div>
                )}
              </div>
            );
          })
      }
    </div>
  </div>
</WidgetWrapper>
