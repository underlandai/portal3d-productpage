---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Button from '~/components/ui/Button.astro';
import type { Contact as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  introText,
  companySizeOptions,
  productOptions,
  inputs,
  textarea,
  consentText,
  additionalConsent,
  button,
  description,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<script>
  // Contact form script with debug info
  console.log('‚úÖ Contact form script loaded at:', new Date().toISOString());
  
  // Test if we can access the form immediately
  const immediateForm = document.getElementById('contactForm');
  console.log('üîç Form immediately available:', !!immediateForm);
  
  // Global variables to prevent conflicts
  if (!(window as any).contactFormInitialized) {
    (window as any).contactFormInitialized = false;
    
    function initializeContactForm() {
      if (window.contactFormInitialized) {
        console.log('‚ö†Ô∏è Contact form already initialized, skipping');
        return;
      }
      
      console.log('üöÄ Starting contact form initialization');
      
      const form = document.getElementById('contactForm');
      const formContainer = document.getElementById('formContainer');
      const successMessage = document.getElementById('successMessage');
      const submitAgainBtn = document.getElementById('submitAgain');

      console.log('üîç Contact form elements check:', {
        form: !!form,
        formContainer: !!formContainer,
        successMessage: !!successMessage,
        submitAgainBtn: !!submitAgainBtn,
        formHTML: form ? form.outerHTML.substring(0, 100) + '...' : 'null'
      });

      if (form && formContainer && successMessage && submitAgainBtn) {
        console.log('‚úÖ All contact form elements found, setting up handlers');
        window.contactFormInitialized = true;
        
        // Remove any existing event listeners first
        const newForm = form.cloneNode(true);
        form.parentNode.replaceChild(newForm, form);
        const cleanForm = document.getElementById('contactForm');
        
        function handleSubmit(e) {
          console.log('üéØ Contact form submit triggered!');
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          
          console.log('üìã Gathering form data');
          const formData = new FormData(cleanForm);
          
          // Show all form data
          console.log('üìä Form data entries:');
          for (let [key, value] of formData.entries()) {
            console.log(`  ${key}: ${value}`);
          }
          
          // Submit to API
          fetch('/api/send-email', {
            method: 'POST',
            body: formData,
          })
          .then(response => {
            console.log('üì° API response status:', response.status);
            return response.json();
          })
          .then(result => {
            console.log('üìä API result:', result);
            
            if (result.success) {
              console.log('üéâ Success! Showing confirmation');
              formContainer.classList.add('hidden');
              successMessage.classList.remove('hidden');
            } else {
              console.error('‚ùå Server error:', result.error);
              alert('Error sending message: ' + (result.error || 'Unknown error'));
            }
          })
          .catch(error => {
            console.error('üí• Network error:', error);
            alert('Network error. Please try again.');
          });
          
          return false;
        }
        
        // Attach event listeners
        cleanForm.addEventListener('submit', handleSubmit, true);
        cleanForm.onsubmit = handleSubmit;
        
        // Also try to prevent any other submit handlers
        cleanForm.addEventListener('submit', (e) => {
          console.log('üõë Secondary prevention handler');
          e.preventDefault();
          return false;
        }, false);
        
        console.log('‚úÖ Contact form event listeners attached');
        
        // Submit again handler
        submitAgainBtn.addEventListener('click', () => {
          console.log('üîÑ Submit again clicked');
          cleanForm.reset();
          successMessage.classList.add('hidden');
          formContainer.classList.remove('hidden');
        });
        
      } else {
        console.log('‚è≥ Contact form elements not ready, retrying in 100ms');
        setTimeout(initializeContactForm, 100);
      }
    }
    
    // Try multiple initialization approaches
    if (document.readyState === 'loading') {
      console.log('üìÑ Document still loading, waiting for DOMContentLoaded');
      document.addEventListener('DOMContentLoaded', initializeContactForm);
    } else {
      console.log('üìÑ Document already loaded, initializing immediately');
      initializeContactForm();
    }
    
    // Backup initialization
    setTimeout(initializeContactForm, 1000);
    
    // Also try on window load
    window.addEventListener('load', initializeContactForm);
  }
</script>

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  {
    inputs && (
      <div class="flex flex-col max-w-xl mx-auto rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow p-4 sm:p-6 lg:p-8 w-full">
        {/* Success Message (hidden by default) */}
        <div id="successMessage" class="hidden">
          <div class="flex flex-col items-center justify-center text-center py-10">
          <div class="mb-4 text-green-500">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h3 class="text-xl font-bold mb-2">Thank you.</h3>
          <p class="mb-6 text-gray-600 dark:text-gray-400">Our team is looking forward to connecting with you. You'll hear from us soon!</p>
          <Button id="submitAgain" variant="primary" type="button">
            Submit again
          </Button>
          </div>
        </div>
        
        {/* Form Container */}
        <div id="formContainer">
          {introText && (
            <div class="mb-6">
              <p class="text-sm whitespace-pre-line">{introText}</p>
            </div>
          )}
          
          <form id="contactForm">
            {
              inputs &&
                inputs.map(
                  ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', required = false, width = 'full' }) =>
                    name && (
                      <div class={`mb-6 ${width === 'half' ? 'w-1/2 inline-block' : 'w-full'} ${width === 'half' ? (name.includes('first') || name.includes('jobTitle') ? 'pr-2' : 'pl-2') : ''}`}>
                        {label && (
                          <label for={name} class="block text-sm font-medium">
                            {label}{required && <span class="text-red-500">*</span>}
                          </label>
                        )}
                        <input
                          type={type}
                          name={name}
                          id={name}
                          autocomplete={autocomplete}
                          placeholder={placeholder}
                          required={required}
                          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                        />
                      </div>
                    )
                )
            }
            
            {companySizeOptions && (
              <div class="mb-6">
                <label for="companySize" class="block text-sm font-medium">
                  Company size<span class="text-red-500">*</span>
                </label>
                <select
                  id="companySize"
                  name="companySize"
                  required
                  class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                >
                  {companySizeOptions.map((option, index) => (
                    <option 
                      value={index === 0 ? '' : option} 
                      disabled={index === 0}
                      selected={index === 0}
                      class={index === 0 ? 'text-gray-400' : ''}
                    >
                      {option}
                    </option>
                  ))}
                </select>
              </div>
            )}
            
            {productOptions && (
              <div class="mb-6">
                <label for="product" class="block text-sm font-medium">
                  Which of our products are you interested in?<span class="text-red-500">*</span>
                </label>
                <select
                  id="product"
                  name="companyProduct"
                  required
                  class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                >
                  {productOptions.map((option, index) => (
                    <option 
                      value={index === 0 ? '' : option} 
                      disabled={index === 0}
                      selected={index === 0}
                      class={index === 0 ? 'text-gray-400' : ''}
                    >
                      {option}
                    </option>
                  ))}
                </select>
              </div>
            )}
            
            {
              textarea && (
                <div>
                  <label for="textarea" class="block text-sm font-medium">
                    {textarea.label}{textarea.required && <span class="text-red-500">*</span>}
                  </label>
                  <textarea
                    id="textarea"
                    name={textarea.name ? textarea.name : 'message'}
                    rows={textarea.rows ? textarea.rows : 4}
                    placeholder={textarea.placeholder}
                    required={textarea.required}
                    class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                  />
                </div>
              )
            }
            
            {
              consentText && (
                <div class="mt-6 mb-4">
                  <p class="text-sm text-gray-600 dark:text-gray-400" set:html={consentText}>
                  </p>
                </div>
              )
            }
            
            {
              additionalConsent && (
                <div class="mt-3 flex items-start">
                  <div class="flex mt-0.5">
                    <input
                      id="additionalConsent"
                      name="additionalConsent"
                      type="checkbox"
                      required={additionalConsent.required}
                      class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
                    />
                  </div>
                  <div class="ml-3">
                    <label for="additionalConsent" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
                      {additionalConsent.label}
                    </label>
                  </div>
                </div>
              )
            }
            
            {
              button && (
                <div class="mt-10 grid">
                  <Button variant="primary" type="submit">
                    {button}
                  </Button>
                </div>
              )
            }
            
            {
              description && (
                <div class="mt-3 text-center">
                  <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
                </div>
              )
            }
          </form>
        </div>
      </div>
    )
  }
</WidgetWrapper>
